Given an array A[] of integers, sort the array according to frequency of elements.
That is elements that have higher frequency come first. 
If frequencies of two elements are same, then smaller number comes first.

Lesson:Custom sorting of vector of pairs using lamda.

Input:
2
5
5 5 4 6 4
5
9 9 9 2 5
Output:
4 4 5 5 6
9 9 9 2 5

Constraints:
1 ≤ T ≤ 70
30 ≤ N ≤ 130
1 ≤ Ai ≤ 60 

Approach:Do indexing to count the frequency. Then make a vector of pairs and sort them 
	 in descending order based on frequency. If there is clash in frequency sort in 
	 ascending order based on element.

Time Complexity:O(n*m), where m is the maximum frequency in the input.
Execution time: 0.01sec.
Space Complexity: O(N);	

Code:
#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
	
	ll test;
	cin>>test;
	
	while(test--){
	    int size,input;
	    int arr[61];
	    memset(arr,0,sizeof(arr));
	    cin>>size;
	    
	    vector<pair<int,int>>VP;
	    pair<int,int>P;
	    
	    for(int i=0;i<size;i++){
	        cin>>input;
	        arr[input]++;
	    }
	    for(int i=1;i<=60;i++){
	        P={arr[i],i};
	        VP.push_back(P);
	    }
           

        
	 //Custom sort of pair using lamda
	
        
	    sort(VP.begin(),VP.end(),[](const pair<int,int> &p1,const pair<int,int> &p2)
	    {
	        if(p1.first!=p2.first)
	            return p1.first>p2.first;
	       
	            return p1.second<p2.second;
	    });
	    for(int i=0;i<VP.size();i++){
	        while(VP[i].first!=0){
	            cout<<VP[i].second<<" ";
	            VP[i].first--;
	        }
	    }
	    cout<<endl;
	    
	}
	
	return 0;
}

