Smallest Positive missing number 
You are given an array arr[] of N integers including 0. The task is to find the smallest positive number missing from the array.
Note: Expected solution in O(n) time using constant extra space.

Approach: If all +ve then to their index *-1 the place wich is not -ve will be desired value;
	  In case of -ve values pair the values with their index the index which is not paired is you value
	  nums[i] != nums[nums[i]-1] this will check if paired or not and will also avoid [1,1] infinite loop in such scenario
	 O(n) coz every nuber will be swapped atmost twice.	

Example:	[2,4,5,1,-6,8] --> [4,2,5,1,-6,8]  2 is at its index, pointer is still at 0 and checks for 4
		
		[1,2,5,4,-6,8]	4 is at its index and pointer checks for 1 and 2 which is at its index 

		[1,2,-6,4,5,8]  -6 is less than 0 so, nothing happens and 8 is greater than available index
				



Constraints:
1 <= T <= 100
1 <= N <= 106
-106 <= arr[i] <= 106

Example:
Input:
2
5
1 2 3 4 5
5
0 -10 1 3 -20
Output:
6
2


int firstMissingPositive(vector<int>& nums) {
        
        if(!nums.size()){
            return 1;
        }
        else if(nums.size()==1){
            for(int i=1;i<nums[0];++i){
                if(i<nums[0])
                    return i;
            }
        }
        
        for(int i=0;i<nums.size();){
            if(nums[i]<=nums.size() && nums[i]>0 && nums[i] != nums[nums[i]-1]){
                swap(nums[nums[i]-1],nums[i]);
            }
            else{
                ++i;
            }
        }
        
        for(int i=0;i<nums.size();++i){
            if(nums[i]!=i+1){
                return i+1;
            }
        }
        
        return nums.size()+1;
    }

