Equal Sum
Given an array A of length N. Determine if there exists an element in the array such that the sum of the elements on its left is equal to the sum of
the elements on its right. If there are no elements to the left/right, then the sum is considered to be zero. 
Formally, find an i, such that, A1+A2...Ai-1 =Ai+1+Ai+2...AN.

Approach: Take two array one with left sum other with right Sum. Reverse right And check where value is same with same index;
eg:	 1 2 3 3
LeftSum  1 3 6 9
rightsum 3 6 8 9
ReverseR 9 8 6 3 

Here 6 is same at index 2.


Constraints:

1≤ T ≤ 30 
1≤ N ≤100000 
1≤ Ai ≤ 2×10000 
1≤ i ≤N


Example:

Input
1
4
1 2 3 3
Output:
YES


Time-O(N);
SPACE-O(2N);
#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input,sum=0,found=1;
        vector<int>vect;
        vector<int>sumLeft;
        vector<int>sumRight;
        
        cin>>size;
        
        for(int i=0;i<size;i++){
            cin>>input;
            sum+=input;
            sumLeft.push_back(sum);
            vect.push_back(input);
        }
        sum=0;
        for(int i=size-1;i>=0;i--){
            sum+=vect[i];
            sumRight.push_back(sum);
        }
        reverse(sumRight.begin(),sumRight.end());
        for(int i=0;i<size;i++){
            if(sumLeft[i]==sumRight[i]){
                cout<<"YES"<<endl;
                found=0;
            }
        }
        
        if(found){
            cout<<"NO"<<endl;
        }
        
    }

	return 0;
}
