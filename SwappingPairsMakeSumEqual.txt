Swapping pairs make sum equal
Given two arrays of integers, write a program to check if a pair of values (one value from each array) 
exists such that swapping the elements of the pair will make the sum of two arrays equal.

Approach: Check wheather which of two array has less sum. Iterate through it and
 	4 1 2 1 1 2 = 11      
	3 6 3 3     = 15
`	
	11-1 = 10 
	15+1 = 16 

	16-10/2 = 3(if 3 is available in other array means one can swap);

Constraints:
1 <= T <= 100
1 <= N <= 104
1 <= M <= 104
0 <= elements <= 104

Example:
Input:
2
6 4
4 1 2 1 1 2
3 6 3 3
4 4
5 7 4 6
1 2 3 8

Output:
1
1


#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size1,size2,input,sum1=0,sum2=0,difference,found=1;
        unordered_set<int>mset;
        unordered_set<int>uset;
        cin>>size1>>size2;
        
        for(int i=0;i<size1;i++){
            cin>>input;
            sum1+=input;
            mset.insert(input);
        }
        for(int i=0;i<size2;i++){
            cin>>input;
            sum2+=input;
            uset.insert(input);
        }
        
            if(sum1>sum2){
                for(auto x:uset){
                    difference=abs((sum1+x)-(sum2-x))/2; 
                    if(mset.find(difference)!=mset.end()){
                        cout<<1<<endl;
                        found=0;
                        break;
                    }
                }
            }
            else if(sum1<sum2){
                for(auto x:mset){
                    difference=((sum2+x)-(sum1-x))/2;
                    if(uset.find(difference)!=uset.end()){
                        cout<<1<<endl;
                        found=0;
                        break;
                    }
                }
            }
            else{
                cout<<-1;
            }
            if(found)
                cout<<-1<<endl;
    }

	return 0;
}