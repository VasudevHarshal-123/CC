Count distinct pairs with difference k
Given an integer array and a non-negative integer k, count all distinct pairs with difference equal to k, i.e., A[ i ] - A[ j ] = k.

Approach: Use of unordered_multiset for fast find and we need to store duplicates and use of set of pairs coz one pair will occour only once in test case given below
	  1 1 1 o/p is 1.
	  LOGIC: 3-1=2(diff)
		3=2+1
	So, currently at 1 check if difference+ current exist or not if yes then save the pair. 	

Constraints:

1 ≤ T ≤ 100
1 ≤ N≤ 100
0≤K≤100
0 ≤ A[i] ≤ 10000


Example:

Input:

3
5 
1 5 4 1 2
0
3
1 1 1
0
3 
1 5 3
2

Output:

1
1
2


#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input,difference;
        unordered_multiset<int>umset;
        set<pair<int,int>>pset;
        cin>>size;
        
        for(int i=0;i<size;i++){
            cin>>input;
            umset.insert(input);
        }
        cin>>difference;
        for(auto it = umset.begin();it!=umset.end();++it){
            auto search = umset.find(difference+(*it));
            if(search!=umset.end() && search!=it){
                pair<int,int>p;
                p.first = (*it);
                p.second = difference+(*it);
                pset.insert(p);
            }
        }
        cout<<pset.size()<<endl;
        
    }

	return 0;
}