Overlapping Intervals 
Given a collection of Intervals,merge all the overlapping Intervals.
For example:

Given [1,3], [2,6], [8,10], [15,18],

return [1,6], [8,10], [15,18].

Make sure the returned intervals are sorted.

Constraints:

1 ≤ T ≤ 50
1 ≤ N ≤ 100
0 ≤ x ≤ y ≤ 100


Example:

Input
2
4
1 3 2 4 6 8 9 10
4
6 8 1 9 2 4 4 7

Output
1 4 6 8 9 10
1 9


Time:O(nlogn)
Space:O(1)

#include <bits/stdc++.h>
#define ll long long int
using namespace std;


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input,input2,low=INT_MAX,high=INT_MIN;
        vector<pair<int,int>>vp;
        pair<int,int>p;
        
        cin>>size;
        for(int i=0;i<size;i++){
            cin>>input>>input2;
            p.first = input;
            p.second = input2;
            
            vp.push_back(p);
            
        }
       
        sort(vp.begin(),vp.end());
        
        low = vp[0].first;
        high = vp[0].second;
        
        for(int i=1;i<size;++i){
            if(vp[i].first>low && vp[i].first>high){
                cout<<low<<" "<<high<<" ";
                low = vp[i].first;
                high = vp[i].second;
            }
            else if(vp[i].first>=low && vp[i].second>high){
                high = vp[i].second;
            }
        }
        cout<<low<<" "<<high;
        
        
        cout<<endl;
    }

	return 0;
}