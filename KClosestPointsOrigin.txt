K Closest Points to Origin
https://leetcode.com/problems/k-closest-points-to-origin/submissions/

APPROACH 1: o(NlogN)	WE ARE SORTING BASED ON FIRST ELEMENT NO NEED OF COMPARATOR

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) { 
        vector<pair<int,int>>out;
        for(int i=0;i<points.size();i++){
            int dist  = (points[i][0]*points[i][0])+(points[i][1]*points[i][1]);
            out.push_back({dist,i});
        }
        sort(out.begin(),out.end());
        vector<vector<int>>ret;
        for(int i=0;i<K;i++){
            ret.push_back(points[out[i].second]);
        }
        return ret;
    }
};

approach 2: O(KlogN)	USING HEAP comparator

class Solution {
public:
    struct comp{
        bool operator()(pair<int,int>&p1,pair<int,int>&p2){
            return p1.first>p2.first;
        }
    };
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) { 
        vector<pair<int,int>>out;
        for(int i=0;i<points.size();i++){
            int dist  = (points[i][0]*points[i][0])+(points[i][1]*points[i][1]);
            out.push_back({dist,i});
        }
        
           priority_queue<pair<int,int>,vector<pair<int,int>>,comp>pq(out.begin(),out.end());
         vector<vector<int>>ret;
        for(int i=0;i<K;i++){
            ret.push_back(points[pq.top().second]);
            pq.pop();
        }
        return ret;
    }
};

SAME COMPLEXITY APPROACH TAKE MORE TIME BUT CLEAN CODE
class Solution {
public:
    struct comp{
        bool operator()(vector<int>&v1,vector<int>&v2){
            int d1 = v1[0]*v1[0]+v1[1]*v1[1];
            int d2 = v2[0]*v2[0]+v2[1]*v2[1];
            return d1>d2;
        }
    };
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) { 
        priority_queue<vector<int>,vector<vector<int>>,comp>pq(points.begin(),points.end());           vector<vector<int>>ret;
        for(int i=0;i<K;i++){
            ret.push_back(pq.top());
            pq.pop();
        }
        return ret;
    }
};