Tie Breaker
Given an array of names of candidates in an election. A candidate name in array represents a vote casted to the candidate. 
You need to find the candidate with maximum votes recieved in the election. It may happen that two or more candidates may have same votes, 
in that case you need to return the name of the candidate which comes first lexicographically in dictionary.

Approach: use map to store value and return the first sting with max occurence will work by using only map.

Constraints
1 <= T <= 100
1 <= N <= 100
names[]: {"abc","cde","abc"........}

Sample Input:
2
4
Turin Nick Turin Nick
3
John Shushma Rajnath

Sample Output:
Nick
John    

string TieBreak(string names[], int n)
{
    unordered_map<string,int>um;
    for(int i=0;i<n;i++){
        if(um.find(names[i])==um.end()){
            um.insert({names[i],1});
        }
        else{
            um[names[i]]++;   
        }
    }
    map<string,int>mp;
    for(auto it=um.begin();it!=um.end();it++){
        mp.insert({(*it).first,(*it).second});
    }
    int max = 0;
    string s;
    for(auto x:mp){
        if(x.second>max){
            max=x.second;
            s= x.first;
        }
    }

	//	WORKS WELL IN 	     
    // auto it = max_element(mp.begin(),mp.end(),[](auto &a,auto &b){
    //     return (a.second)>(b.second);    
    // }); 
    // return it.first	    
    
    return s;
}
