https://leetcode.com/problems/binary-tree-pruning/

Binary Tree Pruning

We are given the head node root of a binary tree, where additionally every node's value is either a 0 or a 1.

Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)

I/P			O/P
[1,1,0,0,1,0,0] = [1,1,0,null,null,1]

HAD TO MANUALLY DELETE NODE. 

class Solution {
public:
    TreeNode* pruneTree(TreeNode* root) {
        if(!root)
            return NULL;
        if(!root->left && !root->right && root->val==0){
            return NULL;
        }
        if(!root->left && !root->right){
            return root;
        }
        TreeNode *left = pruneTree(root->left);
        TreeNode *right = pruneTree(root->right);
        if(!left){
            root->left = NULL;
            
        }
        if(!right){
            root->right = NULL;
        }
        if(!left && !right && root->val==0)
        return NULL;
        return root;
    }
};