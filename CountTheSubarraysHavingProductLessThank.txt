Count the subarrays having product less than k 
Given an array of positive numbers, the task is to find the number of possible contiguous subarrays having product less than a given number K.

 

3
15 18
57 44 92 28 66 60 37 33 52 38 29 76 8 75 22
11 15
2 62 31 79 6 21 37 45 27 23 66
84 131
78 16 94 36 87 93 50 22 63 28 91 60 64 27 41 27 73 37 12 69 68 30 83 31 63 24 68 36 30 3 23 59 70 68 94 57 12 43 30 74 22 20 85 38 99 25 16 71 14 27 92 81 57 74 63 71 97 82 6 26 85 28 37 6 47 30 14 58 25 96 83 46 15 68 35 65 44 51 88 9 77 79 89 85

#include <bits/stdc++.h>
#define ll long long int
using namespace std;



int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input,count=0,product=1,k;
        vector<int>vect;
        
        cin>>size>>k;
        
        for(int i=0;i<size;i++){
            cin>>input;
            vect.push_back(input);
        }
        
        for(int i=0;i<size;++i){
            product=vect[i];
            for(int j=i+1;j<=size;++j){
                if(product<k){
                    count++;
                }
                //This will limit the product. As product increases it becomes random and even negative which will mess the output. 
                if(product>=k)
                    break;
                product=product*vect[j];    
            }
        }    
        cout<<count<<endl;
    }
	return 0;
}