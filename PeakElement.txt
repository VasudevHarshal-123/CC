Peak Element
Given an array A of N integers. The task is to find a peak element in it in O( log N ) .
An array element is peak if it is not smaller than its neighbours. For corner elements, we need to consider only one neighbour.
Note: There may be multiple peak element possible, in that case you may return any valid index (0 based indexing).

Approach:linear

Constraints:
1 <= T <= 100
1 <= N <= 105
1 <= A[] <= 106

Example:
Input:
2
3
1 2 3
2
3 4
Output:
1
1

int peakElement(int arr[], int n)
{
    long long int count=0;
    for(int i=0;i<n;i++){
        if(i==0 && arr[i+1]<=arr[i]){
            return i;
        }
        else if(i==(n-1)&&(arr[i-1]<=arr[i])){
            return i;
        }
        else if(arr[i-1]<=arr[i] && arr[i+1]<=arr[i]){
            return i;
        }
    }
    
        return -1;
}



