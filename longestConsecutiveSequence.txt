Longest consecutive subsequence 
Given an array arr[] of positive integers. 
Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.
Constraints:
1 <= T <= 100
1 <= N <= 105
0 <= a[i] <= 105

Example:
Input:
2
7
2 6 1 9 4 5 3
7
1 9 3 10 4 20 2

Output:
6
4


Approach1: Using indexing and iterating the vector by checking for values to be consective else counts resets.

#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input;
        ll maximum=0,value=0;
        cin>>size;
        
        vector<int>vect(100001,0);
        for(int i=0;i<size;i++){
            cin>>input;
            vect[input]++;
        }
        
        for(int i=0;i<100001;i++){
            if(vect[i]>0){
                value++;
            }
            else{
                if(value>maximum){
                    maximum=value;
                }
                value=0;
            }
        }
        cout<<max(maximum,value)<<endl;
        
        
    }

	return 0;
}



Approach2: using unordered_set(hash) to check if element exist or not using find() and then counting.


#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input;
        ll maximum=0,value=0;
        cin>>size;
        
        vector<int>vect;
        unordered_set<int>uset;
        for(int i=0;i<size;i++){
            cin>>input;
            uset.insert(input);
        }
        
        for(int i=0;i<100001;i++){
            if(uset.find(i)!=uset.end()){
                value++;
            }
            else{
                if(value>maximum){
                    maximum=value;
                }
                value=0;
            }
        }
        cout<<max(maximum,value)<<endl;
        
        
    }

	return 0;
}