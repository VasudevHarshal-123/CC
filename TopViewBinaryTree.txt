Top View of Binary Tree 

APPROACH: BFS UNORDERED_MAP - STORE HORIZ DIST AND ITS MIN AND MAX AND ITERATE THAT
vector<int> topView(struct Node *root)
{
    int leftMax = INT_MAX,rightMax = INT_MIN;
    unordered_map<int,struct Node*>isVisible;
    //node, Hdist
    queue<pair<struct Node*,int>>BFS;
    pair<struct Node*,int>p;
    p.first = root;
    p.second = 0;
    BFS.push(p);

    while(!BFS.empty()){
        p = BFS.front();
        BFS.pop();
        rightMax = max(rightMax,p.second);
        leftMax = min(leftMax,p.second);
        if(isVisible.find(p.second)==isVisible.end()){
            isVisible[p.second] = p.first;
        }
            
        if(p.first->left){
            BFS.push({p.first->left,p.second-1});
        }
        if(p.first->right){
            
            BFS.push({p.first->right,p.second+1});
        }
    }
    
    vector<int>out;
    for(int i = leftMax;i<=rightMax;i++){
        out.push_back(isVisible[i]->data);
    }
    // cout<<endl;
    return out;
}


APPROPACH: BFS: ORDERED MAP

HERE ORDERED MAP IS IMPORTANT. AS THE PUTPUT IS REQUIRED IN INORDER. SO MAP STORES POSITON AS WE MOVE LEFT KEY BECOMES -VE SO IOT WILL COME 1ST SAME AS INORDER.

void topView(struct Node *root)
{
    map<int,struct Node*>isVisible;
    //node, Hdist
    queue<pair<struct Node*,int>>BFS;
    pair<struct Node*,int>p;
    p.first = root;
    p.second = 0;
    BFS.push(p);

    while(!BFS.empty()){
        p = BFS.front();
        BFS.pop();
        if(isVisible.find(p.second)==isVisible.end()){
            isVisible[p.second] = p.first;
        }
            
        if(p.first->left){
            BFS.push({p.first->left,p.second-1});
        }
        if(p.first->right){
            BFS.push({p.first->right,p.second+1});
        }
    }
    for(auto x:isVisible){
        cout<<x.second->data<<" ";
    }
    cout<<endl;
}




APPROACH:DFS:FAILS

REASON: 

		1
	      /   \
	     2     3
               \
                4
 		 \
		   5
HERE, 5 WILL BE INSERTED IN MAP AS IT HAS MAX HORIZ DIST RIGHT WHEN TRAVERSAL REACHES IT BUT LIES BELOW 3 SO WONT COME IN TOP-VIEW

void inOrderPrint(struct Node* root, unordered_map<struct Node*,int>&isVisible){
    if(!root)
        return;
    
    inOrderPrint(root->left,isVisible);
    if(isVisible.find(root)!=isVisible.end()){
        cout<<root->data<<" ";
    }
    inOrderPrint(root->right,isVisible);
    return;
}

void inOrderTraversal(struct Node* root, 
unordered_map<struct Node*,int>&isVisible,int &HDLeftMax, int &HDRightMax,int HD=0){
    if(!root)   
        return;
    
    
    if(HD<HDLeftMax || HD>HDRightMax){
            isVisible[root]++;
            HDLeftMax = min(HDLeftMax,HD);
            HDRightMax = max(HDRightMax,HD);
    }
    
    inOrderTraversal(root->left,isVisible,HDLeftMax,HDRightMax,HD-1);
    inOrderTraversal(root->right,isVisible,HDLeftMax,HDRightMax,HD+1);
    
    return;
}

void topView(struct Node *root)
{
    int HDLeftMax = INT_MAX,HDRightMax = INT_MIN;
    unordered_map<struct Node*,int>isVisible;
    inOrderTraversal(root,isVisible,HDLeftMax,HDRightMax);
    inOrderPrint(root,isVisible);
    cout<<endl;
}



