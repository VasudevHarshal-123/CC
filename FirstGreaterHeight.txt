First Greater Height
There are N students standing outside the class. The heights of these students is represented by a vector V.
Every student j knows the height of each student i standing in front of him (j>i). 
Each student tries to find the smallest height Vi greater than him Vj standing in front of him.
If such a student is the tallest among all students then print -1 for that student.

APPROACH:Upper_bound of an element is checked before insertion, Obviously we are looking for element which has less index so checking before insertion will find it else
-1.

Look at TLE Soln for implementing lower and upper_bound in set of pairs;

Constraints:
1 <= T <= 100
1 <= N <= 105
1 <= Vi <= 105

Example
Input:
1
5
3 2 5 4 1
Output:
-1 3 -1 5 2


vector<int> greater_height(vector<int>v)
{
    set<int>s;
    vector<int>output;
    s.insert(v[0]);
    output.push_back(-1);
    
    for(int i=1;i<v.size();i++){
        auto z = s.upper_bound(v[i]);
        if(z!=s.end()){
            output.push_back(*z);
        }
        else{
            output.push_back(-1);
        }
        s.insert(v[i]);
    }
    
    return output;
}



TLE:
vector<int> greater_height(vector<int>v)
{
    set<pair<int,int>>s;
    vector<int>output;
    int max,maxIndex;
    for(int i=0;i<v.size();i++){
        pair<int,int>p;
        p.first=v[i];
        p.second=i;
        s.insert(p);
    }
    for(int i=0;i<v.size();i++){
        auto z = s.upper_bound({v[i],INT_MIN});
        if(i==0){
            output.push_back(-1);
        }
        else if(z!=s.end() && (*z).second<i){
            auto y=s.upper_bound({v[i],INT_MIN});
            output.push_back((*y).first);
        }
        else if(z==s.end()){
            output.push_back(-1);
        }
        else{
            max=INT_MAX;
            
            for(int j=0;j<i;j++){
                if(v[j]<max && v[j]>v[i]){
                    max=v[j];
                }
            }
            if(max==INT_MAX)
            output.push_back(-1);
            else{
                output.push_back(max);
            }
        }
    }
    return output;
}