Left View of Binary Tree
https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1#

APPROCH 1:ITERATIE THE 1ST NODE IN LVELE ORDER TRAVERSAL IS OUR GUY WHICH IS TAKEN CARE BY A FLAG VARIABLE FIRST. 

#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};

vector<int> leftView(struct Node *root);

// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}


// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);

    // for(string i:ip)
    //     cout<<i<<" ";
    // cout<<endl;
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if(currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if(currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


int main() {
    int t;
    scanf("%d ",&t);
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* root = buildTree(s);
        vector<int> vec = leftView(root);
        for(int x : vec)
        cout<<x<<" ";
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends



							//YOUR CODE
// A wrapper over leftViewUtil()
vector<int> leftView(Node *root)
{
   vector<int>out;
   queue<Node*>q;
   if(!root)
        return out;
    q.push(root);
    int first =0;
    while(!q.empty()){
        int s = q.size();
        first=0;
        for(int i=0;i<s;i++){
            Node *temp = q.front();
            q.pop();
            if(first==0){
                out.push_back(temp->data);
                first=1;
            }
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
                
        }
    }
    
    return out;
      
}


APPROACH 2: RECURSIVE
HERE WE ARE TAKING TOP-DOWN APPROACH THATS WHY MAX VARIABLE IS ALSO PASSED AS REF.

//LeftViewHelper
void lHelper(Node *root,vector<int>&out,int &maximum,int depth=0){
    if(!root)
        return;
    if(!root->left && !root->right && depth>maximum){
        maximum = depth;
        out.push_back(root->data);
        return; 
    }    
    
    if(depth>maximum){
        maximum = depth;
        out.push_back(root->data);
    }
    
    lHelper(root->left,out,maximum,depth+1);
    lHelper(root->right,out,maximum,depth+1);
    return;
}

// A wrapper over leftViewUtil()
vector<int> leftView(Node *root)
{
   vector<int>out;
   int maximum=-1;
   lHelper(root,out,maximum); 
    return out;
}