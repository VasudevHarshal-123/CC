Smaller on Left
Given an array arr[] of N positive integers. The task is to find the greatest smaller on left of every element in the array.

Approach: When inserting in decreasing order in a set the upper_bound is actually lesser one;

s={5,4,3,2,1}		auto x=s.upper_bound(3);  *x=2; 

Constraints:
1 <= T <= 100
1 <= N <= 106
1 <= arr[i] <= 108

Example:
Input:
1
5
2 3 4 5 1

Output:
-1 2 3 4 -1

#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input;
        set<int,greater<int>>s;
        vector<int>vect;
        
        cin>>size;
        
        for(int i=0;i<size;i++){
            cin>>input;
            auto z=s.upper_bound(input);
            if(i==0){
                vect.push_back(-1);
            }
            else if(z!=s.end()){
                vect.push_back(*z);
            }
            else{
                vect.push_back(-1);
            }
            
            s.insert(input);
        }
        
        
        for(int i=0;i<vect.size();i++){
            cout<<vect[i]<<" ";
        }    
        cout<<endl;
        
    }

	return 0;
}
