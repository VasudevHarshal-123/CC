Exactly 3 Divisors
Given a positive integer value N. The task is to find how many numbers less than or equal to N have numbers of divisors exactly equal to 3.

Constraints :
1 <= T <= 100
1 <= N <= 109

Example:
Input :
3
6
10
30
Output :
1
2
3

Pattern: Square root prime numbers are counted 4,9,25,49...
O(nlogn)
bool isPrime(int sq){
    if(sq<=1){
            return false;
        }
        if(sq<=3){
            return true;
        }
        if(sq%2==0 || sq%3==0)
            return false;
        for(int i=5;i*i<=sq;i+=6){
            if(sq%i==0 || sq%(i+2)==0){
                return false;
            }
        }
        return true;
}
//Complete this function
int exactly3Divisors(int N)
{
    int count=0,returnCount=0,i=2;
    while(pow(i,2)<=N){
        if(isPrime(i))
            ++count;
        ++i;    
    }
    return count;
}



Pattern: The number which is divided by only one prime till it reaches itself;
Time: O(N^1/2);

int exactly3Divisors(int N)
{
    int count=0,returnCount=0;
    while(N){
        count=0;
        int sq = sqrt(N); 
        for(int i=2;i<=sq;i++){
            if(N%i==0){
                count++;
            if(N%(N/i)==0 && (N/i)!=i)
               count++;
            }
            if(count==2)
                break;
        }
        if(count==1){
            returnCount++;
            // cout<<N<<" ";
        }
        N--;
    }
    return returnCount;
}