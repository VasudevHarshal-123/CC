Count the elements
Given two arrays A and B. Given Q queries each having a positive integer i denoting an index of the array A. 
For each query, your task is to find all the elements less than or equal to Ai in the array B.



Approach1: Indexing using array and then doing prefix sum so that one can do O(1) lookup.
Approach 2: Using multi set to store in sorted form and upper_bound function to find the value actually present and unordered_map for fast lookup
But unordered_map lookup takes O(1) on average but in worst case scenario it can take O(log n). So try using vector instead

OPTIMISED INDEXING
int mx=0;
	    for(int i=0;i<n;i++)
	     {cin>>a[i];
	      mx=max(a[i],mx);
	     }
	     
	    int temp;
	    for(int i=0;i<n;i++)
	     {
	         cin>>temp;
	         h[temp]++;
	     }
	     
	     int d[mx+1];
	     int cnt=0;
	     for(int i=0;i<=mx;i++)
	     {
	         cnt=h[i]+cnt;
	         d[i]=cnt;
	     }
	    
Since, user will not query any number more than max value of 1st array so indexing till then.


#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input;
        vector<int>vect1;
        vector<int>v2(1000001,0);
        cin>>size;
        
        for(int i=0;i<size;i++){
            cin>>input;
            vect1.push_back(input);
        }
        
        for(int i=0;i<size;i++){
            cin>>input;
            v2[input]++;
        }
        
        for(int i=1;i<1000001;i++){
            v2[i]+=v2[i-1];			//Prefix sum
        }
        
        
        
        int k;
        cin>>k;
        int index;
        while(k--){
            cin>>index;
            cout<<v2[vect1[index]]<<"\n";
        }
    }

	return 0;
}

TLE
#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    ll test;
    cin>>test;
    
    while(test--){
        ll size,input;
        vector<int>vect1;
        multiset<int>ms2;
        unordered_map<int,int>mmap2;
        
        cin>>size;
        
        for(int i=0;i<size;i++){
            cin>>input;
            vect1.push_back(input);
        }
        
        for(int i=0;i<size;i++){
            cin>>input;
            ms2.insert(input);
        }
        int j=0;
        for(auto it = ms2.begin();it!=ms2.end();++it){
            mmap2.insert({(*it),j++});
        }
        int k;
        cin>>k;
        int index;
        while(k--){
            cin>>index;
            if(mmap2[vect1[index]]){
                cout<<mmap2[vect1[index]]<<endl;
            }
            else{
            auto it = ms2.upper_bound(vect1[index]);
            if(it==ms2.end()){
                cout<<size<<endl;
            }
            else{
                cout<<mmap2[*it]<<endl;
            }
            }
        }
    }

	return 0;
}