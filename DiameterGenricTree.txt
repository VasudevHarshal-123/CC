Diameter of Genric Tree
https://cses.fi/problemset/task/1131/

You are given a tree consisting of n nodes.

The diameter of a tree is the maximum distance between two nodes. Your task is to determine the diameter of the tree.

APPROACH: MAKE ADJACENT LIST OF EACH NODE.
	THEN FOR EACH NODE TRAVERSE ITS LIST EXCEPT FOR ITS PARENT AND EACH LEAF NODE WILL RETURN 1 AND REST IS LIKE BINARU TREE
 	PUSH A PARENT FOR ROOT SO THAT IT FOLLOWS THE PARENT RULE

#include <bits/stdc++.h>
#define ll long long 

using namespace std;

int diameter(vector<vector<int>>&adjList, int &ans, int current, int parent){
    if(adjList[current].size()==1){
        return 1;
    }
    
    vector<int>subTreeH;
    for(int j=0;j<adjList[current].size();j++){
        if(adjList[current][j]!=parent){
            subTreeH.push_back(diameter(adjList,ans,adjList[current][j],current));
        } 
    }
    sort(subTreeH.begin(),subTreeH.end());
    int maxH = subTreeH[subTreeH.size()-1];
    int secMaxH = 0;
    if(subTreeH.size()>1)
        secMaxH = subTreeH[subTreeH.size()-2];
    ans = max(ans,maxH+secMaxH);
    
    return maxH+1; 
    
}

int main()
{
    int nodes,x,y,root = INT_MAX;
    cin>>nodes;
    vector<vector<int>>adjList(nodes+1);
    
    for(int i=1;i<nodes;i++){
        cin>>x>>y;
        root = min(root,min(x,y));
        adjList[x].push_back(y);
        adjList[y].push_back(x);
    }
    adjList[root].push_back(root-1);
    int ans = 0;
    // for(int i=0;i<=nodes;i++){
    //     cout<<i<<" : ";
    //     for(int j=0;j<adjList[i].size();j++)
    //         cout<<adjList[i][j]<<" ";
    //     cout<<endl;
    // }
    int dia = diameter(adjList,ans,root,root-1); 
    cout<<ans;
    return 0;
}
