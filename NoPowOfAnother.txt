Check if a number is power of another number
Given two positive numbers x and y, check if y is a power of x or not.

Approach: 2^x = 8; x=answer if exists;
taking log_base2 on both sides:
log_2(2^x) = log_2(8);
xlog_2(2) = 3;
x=3;

But base could be anything, So base change formula;
log_x(y)=log_2(y)/log_2(x);

LEARN:Edge cases- x= 1 y=3;  1^3=1 but base change gives infinity which is true;
      x=someValue y=1   someValue^0=1;   		

Constraints: 
1 <= T <= 30
1 <= x <= 103
1 <= y <= 108

Example:
Input:
2
2 8
1 3
Output:
1
0

Code:
#include <bits/stdc++.h>
using namespace std;

int main() {
	int test;
	cin>>test;
	
	while(test--){
	    int x,y;
	    cin>>x>>y;
	    
	    if(y==1){
	        cout<<1<<endl;
	        continue;
	    }
	    
	    if(x==0 || x==1){
	        cout<<0<<endl;
	        continue;
	    }
	    
	    if(ceil(log2(y)/log2(x))==floor(log2(y)/log2(x))){
	        cout<<1<<endl;
	    }
	    else{
	        cout<<0<<endl;
	    }
	    
	}
	
	return 0;
}
	