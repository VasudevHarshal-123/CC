Sieve of Eratosthenes 
Given a number N, calculate the prime numbers upto N using Sieve of Eratosthenes.  

O(n*log(log(n)));

Constraints:
1 <= T<= 100
1 <= N <= 104

Example:
Input:
2
10
35
Output:
2 3 5 7
2 3 5 7 11 13 17 19 23 29 31 



#include <bits/stdc++.h>
using namespace std;

void seiveOfErasThotenes(long int n){
  
  vector<bool>vect(n+1,true);
  
  for(int i=2;i*i<=n;i++){
    if(vect[i]==true){
        for(int j = i*i;j<=n;j+=i){
            vect[j]=false;
        }
    }    
  }
    for(int i=2;i<=n;i++){
        if(vect[i]==true)
            cout<<i<<" ";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
	long int test;
	cin>>test;
	
	while(test--){
	    long int n;
	    cin>>n;
	    seiveOfErasThotenes(n);
	    cout<<"\n";
	}
	return 0;
}