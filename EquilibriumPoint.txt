Given an array A of N positive numbers. The task is to find the position where equilibrium first occurs in the array.
Equilibrium position in an array is a position such that the sum of elements before it is equal to the sum of elements after it.

Approach: Not Two pointer approach.Doing with the index. Two pointer would be sth like this:
	   long int a[n];
	   for(i=0;i<n;i++)
	   cin>>a[i];
	   long int *x,*y;
	   int flag=0; 
	   x=a;y=a+n-1;
	   long int ans,s1=0,s2=0;
	   while(flag==0&&x<=y)
	   {
	      if(s1==s2&&x!=y)
	      {
	        s1+=*x;
	        s2+=*y;
	        x++;y--;
	      }
	      else if(s1>s2&&x!=y)
	      {
	          s2+=*y;
	          y--;
	      }
	      else if(s1<s2&&x!=y)
	      {
	          s1+=*x;
	          x++;
	      }
	      else if(s1==s2&&x==y)
	        {
	            cout<<(x-a+1)<<endl;flag=1;
	        }
	       else if(s1!=s2&&x==y)
	       {
	           break;
	       }
	   }
	   if(flag==0)
	    cout<<"-1"<<endl;
	 

Constraints:
1 <= T <= 100
1 <= N <= 106
1 <= Ai <= 108

Example:
Input:
2
1
1
5
1 3 5 2 2

Output:
1
3

Time:O(n)

Code:
#include <bits/stdc++.h>
#define ll long long

using namespace std;

int main() {
	ll test;
	cin>>test;
	
	while(test--){
	    ll size;
	    cin>>size;
        ll start=1,end=size,found=1,lhs=0,rhs=0,input;
        vector<int>V;
        V.push_back(0);
	    for(int i=1;i<=size;i++){
	        cin>>input;
	        V.push_back(input);
	    }
	    lhs=V[1];
	    rhs=V[size];
	    while(end>=1&&start<=size){
	        if(start==end && lhs==rhs){
	            cout<<start<<endl;
	            
	            found=0;
	            break;
	        }
	        if(lhs>rhs){
	            rhs+=V[--end];
	        }
	        if(lhs<rhs){
	            lhs+=V[++start];
	        }
	        if(start!=end && lhs==rhs){
	            lhs+=V[++start];
	            rhs+=V[--end];
	        }
	        if(start>end)
	            break;
	    }
	    if(found){
	        cout<<-1<<endl;
	    }

	}
return 0;
}
